import { __decorate, __extends, __param } from "tslib";
import { ChangeDetectorRef, ElementRef, Inject, Injectable, OnDestroy, Optional, } from "@angular/core";
import { Observable, Subject } from "rxjs";
import { RESIZE_OBSERVER } from "./resize-observer";
var NgResizeObserver = /** @class */ (function (_super) {
    __extends(NgResizeObserver, _super);
    function NgResizeObserver() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return NgResizeObserver;
}(Observable));
export { NgResizeObserver };
var ResizeObserverService = /** @class */ (function () {
    function ResizeObserverService(chgRef, el, ResizeObserver) {
        this.chgRef = chgRef;
        this.el = el;
        this.ResizeObserver = ResizeObserver;
        this.onResizeSubject = new Subject();
        this.onResize = this.onResizeSubject.asObservable();
        if (this.el === null) {
            console.error("ng-resize-observer: No provider for ElementRef. This error is most likely because you added the ng-resize-observer provider in a @NgModule. Only add ng-resize-observer on @Component()");
            return;
        }
        if (this.ResizeObserver === null) {
            console.error("ng-resize-observer: ResizeObserver not available. Use the ponyfill module: NgResizeObserverPonyfillModule.");
            return;
        }
        this.observe();
    }
    ResizeObserverService.prototype.ngOnDestroy = function () {
        this.unobserve();
        this.onResizeSubject.complete();
    };
    ResizeObserverService.prototype.observe = function () {
        var _this = this;
        this.resizeObserver = new this.ResizeObserver(function (entries) {
            var entry = entries && entries[0];
            if (entry) {
                _this.onResizeSubject.next(entry);
                _this.chgRef.detectChanges();
            }
        });
        this.resizeObserver.observe(this.target);
    };
    ResizeObserverService.prototype.unobserve = function () {
        this.resizeObserver.unobserve(this.target);
    };
    Object.defineProperty(ResizeObserverService.prototype, "target", {
        get: function () {
            return this.el.nativeElement;
        },
        enumerable: true,
        configurable: true
    });
    ResizeObserverService.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef, decorators: [{ type: Optional }] },
        { type: undefined, decorators: [{ type: Inject, args: [RESIZE_OBSERVER,] }] }
    ]; };
    ResizeObserverService = __decorate([
        Injectable(),
        __param(1, Optional()),
        __param(2, Inject(RESIZE_OBSERVER))
    ], ResizeObserverService);
    return ResizeObserverService;
}());
export { ResizeObserverService };
export function ngResizeObserverFactory(resizeObserverService) {
    return resizeObserverService.onResize;
}
export var NgResizeObserverProvider = {
    provide: NgResizeObserver,
    useFactory: ngResizeObserverFactory,
    deps: [ResizeObserverService],
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctcmVzaXplLW9ic2VydmVyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZy1yZXNpemUtb2JzZXJ2ZXIvIiwic291cmNlcyI6WyJsaWIvbmctcmVzaXplLW9ic2VydmVyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFDTCxpQkFBaUIsRUFDakIsVUFBVSxFQUNWLE1BQU0sRUFDTixVQUFVLEVBQ1YsU0FBUyxFQUNULFFBQVEsR0FDVCxNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUMzQyxPQUFPLEVBQUUsZUFBZSxFQUF1QixNQUFNLG1CQUFtQixDQUFDO0FBRXpFO0lBQXNDLG9DQUErQjtJQUFyRTs7SUFBdUUsQ0FBQztJQUFELHVCQUFDO0FBQUQsQ0FBQyxBQUF4RSxDQUFzQyxVQUFVLEdBQXdCOztBQUd4RTtJQU9FLCtCQUNVLE1BQXlCLEVBQ2IsRUFBYyxFQUUxQixjQUFtQztRQUhuQyxXQUFNLEdBQU4sTUFBTSxDQUFtQjtRQUNiLE9BQUUsR0FBRixFQUFFLENBQVk7UUFFMUIsbUJBQWMsR0FBZCxjQUFjLENBQXFCO1FBVnJDLG9CQUFlLEdBQUcsSUFBSSxPQUFPLEVBQXVCLENBQUM7UUFFdEQsYUFBUSxHQUVYLElBQUksQ0FBQyxlQUFlLENBQUMsWUFBWSxFQUFFLENBQUM7UUFRdEMsSUFBSSxJQUFJLENBQUMsRUFBRSxLQUFLLElBQUksRUFBRTtZQUNwQixPQUFPLENBQUMsS0FBSyxDQUNYLHlMQUF5TCxDQUMxTCxDQUFDO1lBQ0YsT0FBTztTQUNSO1FBRUQsSUFBSSxJQUFJLENBQUMsY0FBYyxLQUFLLElBQUksRUFBRTtZQUNoQyxPQUFPLENBQUMsS0FBSyxDQUNYLDRHQUE0RyxDQUM3RyxDQUFDO1lBQ0YsT0FBTztTQUNSO1FBRUQsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ2pCLENBQUM7SUFFRCwyQ0FBVyxHQUFYO1FBQ0UsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxlQUFlLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDbEMsQ0FBQztJQUVPLHVDQUFPLEdBQWY7UUFBQSxpQkFTQztRQVJDLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxJQUFJLENBQUMsY0FBYyxDQUFDLFVBQUMsT0FBTztZQUNwRCxJQUFNLEtBQUssR0FBRyxPQUFPLElBQUksT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3BDLElBQUksS0FBSyxFQUFFO2dCQUNULEtBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUNqQyxLQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsRUFBRSxDQUFDO2FBQzdCO1FBQ0gsQ0FBQyxDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDM0MsQ0FBQztJQUVPLHlDQUFTLEdBQWpCO1FBQ0UsSUFBSSxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzdDLENBQUM7SUFFRCxzQkFBWSx5Q0FBTTthQUFsQjtZQUNFLE9BQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUM7UUFDL0IsQ0FBQzs7O09BQUE7O2dCQTVDaUIsaUJBQWlCO2dCQUNULFVBQVUsdUJBQWpDLFFBQVE7Z0RBQ1IsTUFBTSxTQUFDLGVBQWU7O0lBVmQscUJBQXFCO1FBRGpDLFVBQVUsRUFBRTtRQVVSLFdBQUEsUUFBUSxFQUFFLENBQUE7UUFDVixXQUFBLE1BQU0sQ0FBQyxlQUFlLENBQUMsQ0FBQTtPQVZmLHFCQUFxQixDQXFEakM7SUFBRCw0QkFBQztDQUFBLEFBckRELElBcURDO1NBckRZLHFCQUFxQjtBQXVEbEMsTUFBTSxVQUFVLHVCQUF1QixDQUNyQyxxQkFBNEM7SUFFNUMsT0FBTyxxQkFBcUIsQ0FBQyxRQUFRLENBQUM7QUFDeEMsQ0FBQztBQUVELE1BQU0sQ0FBQyxJQUFNLHdCQUF3QixHQUFHO0lBQ3RDLE9BQU8sRUFBRSxnQkFBZ0I7SUFDekIsVUFBVSxFQUFFLHVCQUF1QjtJQUNuQyxJQUFJLEVBQUUsQ0FBQyxxQkFBcUIsQ0FBQztDQUM5QixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gIEVsZW1lbnRSZWYsXG4gIEluamVjdCxcbiAgSW5qZWN0YWJsZSxcbiAgT25EZXN0cm95LFxuICBPcHRpb25hbCxcbn0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IFJlc2l6ZU9ic2VydmVyLCBSZXNpemVPYnNlcnZlckVudHJ5IH0gZnJvbSBcIkBqdWdnbGUvcmVzaXplLW9ic2VydmVyXCI7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBTdWJqZWN0IH0gZnJvbSBcInJ4anNcIjtcbmltcG9ydCB7IFJFU0laRV9PQlNFUlZFUiwgUmVzaXplT2JzZXJ2ZXJDbGFzcyB9IGZyb20gXCIuL3Jlc2l6ZS1vYnNlcnZlclwiO1xuXG5leHBvcnQgY2xhc3MgTmdSZXNpemVPYnNlcnZlciBleHRlbmRzIE9ic2VydmFibGU8UmVzaXplT2JzZXJ2ZXJFbnRyeT4ge31cblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFJlc2l6ZU9ic2VydmVyU2VydmljZSBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XG4gIHByaXZhdGUgb25SZXNpemVTdWJqZWN0ID0gbmV3IFN1YmplY3Q8UmVzaXplT2JzZXJ2ZXJFbnRyeT4oKTtcbiAgcHJpdmF0ZSByZXNpemVPYnNlcnZlcjogUmVzaXplT2JzZXJ2ZXI7XG4gIHB1YmxpYyBvblJlc2l6ZTogT2JzZXJ2YWJsZTxcbiAgICBSZXNpemVPYnNlcnZlckVudHJ5XG4gID4gPSB0aGlzLm9uUmVzaXplU3ViamVjdC5hc09ic2VydmFibGUoKTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGNoZ1JlZjogQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gICAgQE9wdGlvbmFsKCkgcHJpdmF0ZSBlbDogRWxlbWVudFJlZixcbiAgICBASW5qZWN0KFJFU0laRV9PQlNFUlZFUilcbiAgICBwcml2YXRlIFJlc2l6ZU9ic2VydmVyOiBSZXNpemVPYnNlcnZlckNsYXNzXG4gICkge1xuICAgIGlmICh0aGlzLmVsID09PSBudWxsKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICBgbmctcmVzaXplLW9ic2VydmVyOiBObyBwcm92aWRlciBmb3IgRWxlbWVudFJlZi4gVGhpcyBlcnJvciBpcyBtb3N0IGxpa2VseSBiZWNhdXNlIHlvdSBhZGRlZCB0aGUgbmctcmVzaXplLW9ic2VydmVyIHByb3ZpZGVyIGluIGEgQE5nTW9kdWxlLiBPbmx5IGFkZCBuZy1yZXNpemUtb2JzZXJ2ZXIgb24gQENvbXBvbmVudCgpYFxuICAgICAgKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5SZXNpemVPYnNlcnZlciA9PT0gbnVsbCkge1xuICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgYG5nLXJlc2l6ZS1vYnNlcnZlcjogUmVzaXplT2JzZXJ2ZXIgbm90IGF2YWlsYWJsZS4gVXNlIHRoZSBwb255ZmlsbCBtb2R1bGU6IE5nUmVzaXplT2JzZXJ2ZXJQb255ZmlsbE1vZHVsZS5gXG4gICAgICApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMub2JzZXJ2ZSgpO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy51bm9ic2VydmUoKTtcbiAgICB0aGlzLm9uUmVzaXplU3ViamVjdC5jb21wbGV0ZSgpO1xuICB9XG5cbiAgcHJpdmF0ZSBvYnNlcnZlKCkge1xuICAgIHRoaXMucmVzaXplT2JzZXJ2ZXIgPSBuZXcgdGhpcy5SZXNpemVPYnNlcnZlcigoZW50cmllcykgPT4ge1xuICAgICAgY29uc3QgZW50cnkgPSBlbnRyaWVzICYmIGVudHJpZXNbMF07XG4gICAgICBpZiAoZW50cnkpIHtcbiAgICAgICAgdGhpcy5vblJlc2l6ZVN1YmplY3QubmV4dChlbnRyeSk7XG4gICAgICAgIHRoaXMuY2hnUmVmLmRldGVjdENoYW5nZXMoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB0aGlzLnJlc2l6ZU9ic2VydmVyLm9ic2VydmUodGhpcy50YXJnZXQpO1xuICB9XG5cbiAgcHJpdmF0ZSB1bm9ic2VydmUoKSB7XG4gICAgdGhpcy5yZXNpemVPYnNlcnZlci51bm9ic2VydmUodGhpcy50YXJnZXQpO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXQgdGFyZ2V0KCkge1xuICAgIHJldHVybiB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQ7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG5nUmVzaXplT2JzZXJ2ZXJGYWN0b3J5KFxuICByZXNpemVPYnNlcnZlclNlcnZpY2U6IFJlc2l6ZU9ic2VydmVyU2VydmljZVxuKSB7XG4gIHJldHVybiByZXNpemVPYnNlcnZlclNlcnZpY2Uub25SZXNpemU7XG59XG5cbmV4cG9ydCBjb25zdCBOZ1Jlc2l6ZU9ic2VydmVyUHJvdmlkZXIgPSB7XG4gIHByb3ZpZGU6IE5nUmVzaXplT2JzZXJ2ZXIsXG4gIHVzZUZhY3Rvcnk6IG5nUmVzaXplT2JzZXJ2ZXJGYWN0b3J5LFxuICBkZXBzOiBbUmVzaXplT2JzZXJ2ZXJTZXJ2aWNlXSxcbn07XG4iXX0=
import { __decorate, __param } from "tslib";
import { ChangeDetectorRef, ElementRef, Inject, Injectable, OnDestroy, Optional, } from "@angular/core";
import { Observable, Subject } from "rxjs";
import { RESIZE_OBSERVER } from "./resize-observer";
export class NgResizeObserver extends Observable {
}
let ResizeObserverService = class ResizeObserverService {
    constructor(chgRef, el, ResizeObserver) {
        this.chgRef = chgRef;
        this.el = el;
        this.ResizeObserver = ResizeObserver;
        this.onResizeSubject = new Subject();
        this.onResize = this.onResizeSubject.asObservable();
        if (this.el === null) {
            console.error(`ng-resize-observer: No provider for ElementRef. This error is most likely because you added the ng-resize-observer provider in a @NgModule. Only add ng-resize-observer on @Component()`);
            return;
        }
        if (this.ResizeObserver === null) {
            console.error(`ng-resize-observer: ResizeObserver not available. Use the ponyfill module: NgResizeObserverPonyfillModule.`);
            return;
        }
        this.observe();
    }
    ngOnDestroy() {
        this.unobserve();
        this.onResizeSubject.complete();
    }
    observe() {
        this.resizeObserver = new this.ResizeObserver((entries) => {
            const entry = entries && entries[0];
            if (entry) {
                this.onResizeSubject.next(entry);
                this.chgRef.detectChanges();
            }
        });
        this.resizeObserver.observe(this.target);
    }
    unobserve() {
        this.resizeObserver.unobserve(this.target);
    }
    get target() {
        return this.el.nativeElement;
    }
};
ResizeObserverService.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef, decorators: [{ type: Optional }] },
    { type: undefined, decorators: [{ type: Inject, args: [RESIZE_OBSERVER,] }] }
];
ResizeObserverService = __decorate([
    Injectable(),
    __param(1, Optional()),
    __param(2, Inject(RESIZE_OBSERVER))
], ResizeObserverService);
export { ResizeObserverService };
export function ngResizeObserverFactory(resizeObserverService) {
    return resizeObserverService.onResize;
}
export const NgResizeObserverProvider = {
    provide: NgResizeObserver,
    useFactory: ngResizeObserverFactory,
    deps: [ResizeObserverService],
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctcmVzaXplLW9ic2VydmVyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZy1yZXNpemUtb2JzZXJ2ZXIvIiwic291cmNlcyI6WyJsaWIvbmctcmVzaXplLW9ic2VydmVyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFDTCxpQkFBaUIsRUFDakIsVUFBVSxFQUNWLE1BQU0sRUFDTixVQUFVLEVBQ1YsU0FBUyxFQUNULFFBQVEsR0FDVCxNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUMzQyxPQUFPLEVBQUUsZUFBZSxFQUF1QixNQUFNLG1CQUFtQixDQUFDO0FBRXpFLE1BQU0sT0FBTyxnQkFBaUIsU0FBUSxVQUErQjtDQUFHO0FBR3hFLElBQWEscUJBQXFCLEdBQWxDLE1BQWEscUJBQXFCO0lBT2hDLFlBQ1UsTUFBeUIsRUFDYixFQUFjLEVBRTFCLGNBQW1DO1FBSG5DLFdBQU0sR0FBTixNQUFNLENBQW1CO1FBQ2IsT0FBRSxHQUFGLEVBQUUsQ0FBWTtRQUUxQixtQkFBYyxHQUFkLGNBQWMsQ0FBcUI7UUFWckMsb0JBQWUsR0FBRyxJQUFJLE9BQU8sRUFBdUIsQ0FBQztRQUV0RCxhQUFRLEdBRVgsSUFBSSxDQUFDLGVBQWUsQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQVF0QyxJQUFJLElBQUksQ0FBQyxFQUFFLEtBQUssSUFBSSxFQUFFO1lBQ3BCLE9BQU8sQ0FBQyxLQUFLLENBQ1gseUxBQXlMLENBQzFMLENBQUM7WUFDRixPQUFPO1NBQ1I7UUFFRCxJQUFJLElBQUksQ0FBQyxjQUFjLEtBQUssSUFBSSxFQUFFO1lBQ2hDLE9BQU8sQ0FBQyxLQUFLLENBQ1gsNEdBQTRHLENBQzdHLENBQUM7WUFDRixPQUFPO1NBQ1I7UUFFRCxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDakIsQ0FBQztJQUVELFdBQVc7UUFDVCxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDakIsSUFBSSxDQUFDLGVBQWUsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUNsQyxDQUFDO0lBRU8sT0FBTztRQUNiLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUU7WUFDeEQsTUFBTSxLQUFLLEdBQUcsT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNwQyxJQUFJLEtBQUssRUFBRTtnQkFDVCxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDakMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLEVBQUUsQ0FBQzthQUM3QjtRQUNILENBQUMsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzNDLENBQUM7SUFFTyxTQUFTO1FBQ2YsSUFBSSxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzdDLENBQUM7SUFFRCxJQUFZLE1BQU07UUFDaEIsT0FBTyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQztJQUMvQixDQUFDO0NBQ0YsQ0FBQTs7WUE3Q21CLGlCQUFpQjtZQUNULFVBQVUsdUJBQWpDLFFBQVE7NENBQ1IsTUFBTSxTQUFDLGVBQWU7O0FBVmQscUJBQXFCO0lBRGpDLFVBQVUsRUFBRTtJQVVSLFdBQUEsUUFBUSxFQUFFLENBQUE7SUFDVixXQUFBLE1BQU0sQ0FBQyxlQUFlLENBQUMsQ0FBQTtHQVZmLHFCQUFxQixDQXFEakM7U0FyRFkscUJBQXFCO0FBdURsQyxNQUFNLFVBQVUsdUJBQXVCLENBQ3JDLHFCQUE0QztJQUU1QyxPQUFPLHFCQUFxQixDQUFDLFFBQVEsQ0FBQztBQUN4QyxDQUFDO0FBRUQsTUFBTSxDQUFDLE1BQU0sd0JBQXdCLEdBQUc7SUFDdEMsT0FBTyxFQUFFLGdCQUFnQjtJQUN6QixVQUFVLEVBQUUsdUJBQXVCO0lBQ25DLElBQUksRUFBRSxDQUFDLHFCQUFxQixDQUFDO0NBQzlCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDaGFuZ2VEZXRlY3RvclJlZixcbiAgRWxlbWVudFJlZixcbiAgSW5qZWN0LFxuICBJbmplY3RhYmxlLFxuICBPbkRlc3Ryb3ksXG4gIE9wdGlvbmFsLFxufSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgUmVzaXplT2JzZXJ2ZXIsIFJlc2l6ZU9ic2VydmVyRW50cnkgfSBmcm9tIFwiQGp1Z2dsZS9yZXNpemUtb2JzZXJ2ZXJcIjtcbmltcG9ydCB7IE9ic2VydmFibGUsIFN1YmplY3QgfSBmcm9tIFwicnhqc1wiO1xuaW1wb3J0IHsgUkVTSVpFX09CU0VSVkVSLCBSZXNpemVPYnNlcnZlckNsYXNzIH0gZnJvbSBcIi4vcmVzaXplLW9ic2VydmVyXCI7XG5cbmV4cG9ydCBjbGFzcyBOZ1Jlc2l6ZU9ic2VydmVyIGV4dGVuZHMgT2JzZXJ2YWJsZTxSZXNpemVPYnNlcnZlckVudHJ5PiB7fVxuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgUmVzaXplT2JzZXJ2ZXJTZXJ2aWNlIGltcGxlbWVudHMgT25EZXN0cm95IHtcbiAgcHJpdmF0ZSBvblJlc2l6ZVN1YmplY3QgPSBuZXcgU3ViamVjdDxSZXNpemVPYnNlcnZlckVudHJ5PigpO1xuICBwcml2YXRlIHJlc2l6ZU9ic2VydmVyOiBSZXNpemVPYnNlcnZlcjtcbiAgcHVibGljIG9uUmVzaXplOiBPYnNlcnZhYmxlPFxuICAgIFJlc2l6ZU9ic2VydmVyRW50cnlcbiAgPiA9IHRoaXMub25SZXNpemVTdWJqZWN0LmFzT2JzZXJ2YWJsZSgpO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgY2hnUmVmOiBDaGFuZ2VEZXRlY3RvclJlZixcbiAgICBAT3B0aW9uYWwoKSBwcml2YXRlIGVsOiBFbGVtZW50UmVmLFxuICAgIEBJbmplY3QoUkVTSVpFX09CU0VSVkVSKVxuICAgIHByaXZhdGUgUmVzaXplT2JzZXJ2ZXI6IFJlc2l6ZU9ic2VydmVyQ2xhc3NcbiAgKSB7XG4gICAgaWYgKHRoaXMuZWwgPT09IG51bGwpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgIGBuZy1yZXNpemUtb2JzZXJ2ZXI6IE5vIHByb3ZpZGVyIGZvciBFbGVtZW50UmVmLiBUaGlzIGVycm9yIGlzIG1vc3QgbGlrZWx5IGJlY2F1c2UgeW91IGFkZGVkIHRoZSBuZy1yZXNpemUtb2JzZXJ2ZXIgcHJvdmlkZXIgaW4gYSBATmdNb2R1bGUuIE9ubHkgYWRkIG5nLXJlc2l6ZS1vYnNlcnZlciBvbiBAQ29tcG9uZW50KClgXG4gICAgICApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0aGlzLlJlc2l6ZU9ic2VydmVyID09PSBudWxsKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICBgbmctcmVzaXplLW9ic2VydmVyOiBSZXNpemVPYnNlcnZlciBub3QgYXZhaWxhYmxlLiBVc2UgdGhlIHBvbnlmaWxsIG1vZHVsZTogTmdSZXNpemVPYnNlcnZlclBvbnlmaWxsTW9kdWxlLmBcbiAgICAgICk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5vYnNlcnZlKCk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLnVub2JzZXJ2ZSgpO1xuICAgIHRoaXMub25SZXNpemVTdWJqZWN0LmNvbXBsZXRlKCk7XG4gIH1cblxuICBwcml2YXRlIG9ic2VydmUoKSB7XG4gICAgdGhpcy5yZXNpemVPYnNlcnZlciA9IG5ldyB0aGlzLlJlc2l6ZU9ic2VydmVyKChlbnRyaWVzKSA9PiB7XG4gICAgICBjb25zdCBlbnRyeSA9IGVudHJpZXMgJiYgZW50cmllc1swXTtcbiAgICAgIGlmIChlbnRyeSkge1xuICAgICAgICB0aGlzLm9uUmVzaXplU3ViamVjdC5uZXh0KGVudHJ5KTtcbiAgICAgICAgdGhpcy5jaGdSZWYuZGV0ZWN0Q2hhbmdlcygpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHRoaXMucmVzaXplT2JzZXJ2ZXIub2JzZXJ2ZSh0aGlzLnRhcmdldCk7XG4gIH1cblxuICBwcml2YXRlIHVub2JzZXJ2ZSgpIHtcbiAgICB0aGlzLnJlc2l6ZU9ic2VydmVyLnVub2JzZXJ2ZSh0aGlzLnRhcmdldCk7XG4gIH1cblxuICBwcml2YXRlIGdldCB0YXJnZXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuZWwubmF0aXZlRWxlbWVudDtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gbmdSZXNpemVPYnNlcnZlckZhY3RvcnkoXG4gIHJlc2l6ZU9ic2VydmVyU2VydmljZTogUmVzaXplT2JzZXJ2ZXJTZXJ2aWNlXG4pIHtcbiAgcmV0dXJuIHJlc2l6ZU9ic2VydmVyU2VydmljZS5vblJlc2l6ZTtcbn1cblxuZXhwb3J0IGNvbnN0IE5nUmVzaXplT2JzZXJ2ZXJQcm92aWRlciA9IHtcbiAgcHJvdmlkZTogTmdSZXNpemVPYnNlcnZlcixcbiAgdXNlRmFjdG9yeTogbmdSZXNpemVPYnNlcnZlckZhY3RvcnksXG4gIGRlcHM6IFtSZXNpemVPYnNlcnZlclNlcnZpY2VdLFxufTtcbiJdfQ==
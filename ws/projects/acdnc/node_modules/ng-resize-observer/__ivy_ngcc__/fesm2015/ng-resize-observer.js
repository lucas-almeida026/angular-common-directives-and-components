import { __decorate, __param } from 'tslib';
import { InjectionToken, ChangeDetectorRef, ElementRef, Optional, Inject, Injectable, NgModule } from '@angular/core';
import { Observable, Subject } from 'rxjs';
import { ResizeObserver } from '@juggle/resize-observer';

const RESIZE_OBSERVER = new InjectionToken("Resize Observer", {
    providedIn: "root",
    factory: () => window.ResizeObserver || null
});

class NgResizeObserver extends Observable {
}
let ResizeObserverService = class ResizeObserverService {
    constructor(chgRef, el, ResizeObserver) {
        this.chgRef = chgRef;
        this.el = el;
        this.ResizeObserver = ResizeObserver;
        this.onResizeSubject = new Subject();
        this.onResize = this.onResizeSubject.asObservable();
        if (this.el === null) {
            console.error(`ng-resize-observer: No provider for ElementRef. This error is most likely because you added the ng-resize-observer provider in a @NgModule. Only add ng-resize-observer on @Component()`);
            return;
        }
        if (this.ResizeObserver === null) {
            console.error(`ng-resize-observer: ResizeObserver not available. Use the ponyfill module: NgResizeObserverPonyfillModule.`);
            return;
        }
        this.observe();
    }
    ngOnDestroy() {
        this.unobserve();
        this.onResizeSubject.complete();
    }
    observe() {
        this.resizeObserver = new this.ResizeObserver((entries) => {
            const entry = entries && entries[0];
            if (entry) {
                this.onResizeSubject.next(entry);
                this.chgRef.detectChanges();
            }
        });
        this.resizeObserver.observe(this.target);
    }
    unobserve() {
        this.resizeObserver.unobserve(this.target);
    }
    get target() {
        return this.el.nativeElement;
    }
};
ResizeObserverService.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef, decorators: [{ type: Optional }] },
    { type: undefined, decorators: [{ type: Inject, args: [RESIZE_OBSERVER,] }] }
];
ResizeObserverService = __decorate([
    Injectable(),
    __param(1, Optional()),
    __param(2, Inject(RESIZE_OBSERVER))
], ResizeObserverService);
function ngResizeObserverFactory(resizeObserverService) {
    return resizeObserverService.onResize;
}
const NgResizeObserverProvider = {
    provide: NgResizeObserver,
    useFactory: ngResizeObserverFactory,
    deps: [ResizeObserverService],
};

function ponyFillFactory() {
    return window.ResizeObserver || ResizeObserver;
}
;
const polyfillProvider = { provide: RESIZE_OBSERVER, useFactory: ponyFillFactory };
let NgResizeObserverPonyfillModule = class NgResizeObserverPonyfillModule {
};
NgResizeObserverPonyfillModule = __decorate([
    NgModule({
        providers: [polyfillProvider]
    })
], NgResizeObserverPonyfillModule);

const ngResizeObserverProviders = [
    NgResizeObserverProvider,
    ResizeObserverService
];
const ngResizeObserverProvidersWithPonyfill = [
    ...ngResizeObserverProviders,
    polyfillProvider
];

/**
 * Generated bundle index. Do not edit.
 */

export { NgResizeObserver, NgResizeObserverPonyfillModule, ngResizeObserverProviders, ngResizeObserverProvidersWithPonyfill, ResizeObserverService as ɵa, ngResizeObserverFactory as ɵb, NgResizeObserverProvider as ɵc, ponyFillFactory as ɵd, polyfillProvider as ɵe, RESIZE_OBSERVER as ɵg };
//# sourceMappingURL=ng-resize-observer.js.map

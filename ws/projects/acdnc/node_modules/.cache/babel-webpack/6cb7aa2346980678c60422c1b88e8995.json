{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Directive, Component, Input, ViewChild, NgModule } from '@angular/core';\nimport * as i1 from 'ng-resize-observer';\nimport { ngResizeObserverProviders } from 'ng-resize-observer';\nimport { CommonModule } from '@angular/common';\nconst _c0 = [\"text\"];\nconst _c1 = [\"loadingWrapper\"];\nconst _c2 = [\"body\"];\n\nclass TransferClickToParentElement {\n  constructor(el) {\n    const element = el.nativeElement;\n\n    if (element.parentElement) {\n      element.addEventListener('click', e => {\n        var _a, _b;\n\n        e.stopPropagation();\n        e.preventDefault();\n        if ((_a = element.parentElement) === null || _a === void 0 ? void 0 : _a.click) (_b = element.parentElement) === null || _b === void 0 ? void 0 : _b.click();\n      });\n    }\n  }\n\n}\n\nTransferClickToParentElement.ɵfac = function TransferClickToParentElement_Factory(t) {\n  return new (t || TransferClickToParentElement)(i0.ɵɵdirectiveInject(i0.ElementRef));\n};\n\nTransferClickToParentElement.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: TransferClickToParentElement,\n  selectors: [[\"\", \"transferClickToParentElement\", \"\"]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TransferClickToParentElement, [{\n    type: Directive,\n    args: [{\n      selector: '[transferClickToParentElement]'\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }];\n  }, null);\n})();\n\nclass autoHeight100Percent {\n  constructor(el, resize$) {\n    this.element = el.nativeElement;\n    let direction = '';\n    let ref = window.innerWidth;\n    window.addEventListener('resize', () => {\n      direction = ref - window.innerWidth > 0 ? 'left' : 'right';\n      ref = window.innerWidth;\n    });\n    setTimeout(() => {\n      const element = el.nativeElement;\n      const initialHeight = element.offsetHeight;\n      resize$.subscribe(() => {\n        if (element.parentElement) {\n          element.style.height = '0px';\n\n          if (direction == 'right') {\n            if (element.parentElement.offsetHeight - element.offsetHeight > 0) {\n              element.style.height = `${element.parentElement.offsetHeight - element.offsetHeight + initialHeight}px`;\n            } else {\n              element.style.height = `${initialHeight}px`;\n            }\n          } else {\n            element.style.height = `${element.parentElement.offsetHeight}px`;\n          }\n        }\n      });\n    }, 100);\n  }\n\n  ngAfterViewInit() {\n    if (this.element.parentElement) {\n      if (this.element.offsetHeight < this.element.parentElement.offsetHeight) {\n        this.element.style.height = `${this.element.parentElement.offsetHeight}px`;\n      }\n    }\n  }\n\n}\n\nautoHeight100Percent.ɵfac = function autoHeight100Percent_Factory(t) {\n  return new (t || autoHeight100Percent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.NgResizeObserver));\n};\n\nautoHeight100Percent.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: autoHeight100Percent,\n  selectors: [[\"\", \"autoHeight100Percent\", \"\"]],\n  features: [i0.ɵɵProvidersFeature([...ngResizeObserverProviders])]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(autoHeight100Percent, [{\n    type: Directive,\n    args: [{\n      selector: '[autoHeight100Percent]',\n      providers: [...ngResizeObserverProviders]\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i1.NgResizeObserver\n    }];\n  }, null);\n})();\n\nclass BtnWithLoadingComponent {\n  constructor() {}\n\n  ngOnInit() {}\n\n  ngAfterViewInit() {\n    this.textEl = this.text.nativeElement;\n    this.loadingWrapperEl = this.loadingWrapper.nativeElement;\n    this.bodyEl = this.body.nativeElement;\n    this.$loading.subscribe(r => this.onLoadingChange(r));\n  }\n\n  onLoadingChange(v) {\n    let width;\n\n    if (v) {\n      width = this.bodyEl.offsetWidth;\n      this.textEl.style.display = 'none';\n      this.loadingWrapperEl.style.display = 'flex';\n      this.bodyEl.style.width = `${width}px`;\n    } else {\n      this.textEl.style.display = 'flex';\n      this.loadingWrapperEl.style.display = 'none';\n      this.bodyEl.style.width = `${width}px`;\n    }\n  }\n\n}\n\nBtnWithLoadingComponent.ɵfac = function BtnWithLoadingComponent_Factory(t) {\n  return new (t || BtnWithLoadingComponent)();\n};\n\nBtnWithLoadingComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: BtnWithLoadingComponent,\n  selectors: [[\"acdnc-btn-with-loading\"]],\n  viewQuery: function BtnWithLoadingComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n      i0.ɵɵviewQuery(_c1, 5);\n      i0.ɵɵviewQuery(_c2, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.text = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.loadingWrapper = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.body = _t.first);\n    }\n  },\n  inputs: {\n    value: \"value\",\n    $loading: \"$loading\"\n  },\n  decls: 9,\n  vars: 1,\n  consts: [[1, \"body\"], [\"body\", \"\"], [1, \"text\"], [\"text\", \"\"], [1, \"loadingWrapper\"], [\"loadingWrapper\", \"\"], [\"width\", \"20\", \"height\", \"20\"], [\"cx\", \"10\", \"cy\", \"10\", \"r\", \"8\", \"stroke\", \"white\", \"stroke-width\", \"2\", \"fill\", \"transparent\"]],\n  template: function BtnWithLoadingComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0, 1);\n      i0.ɵɵelementStart(2, \"div\", 2, 3);\n      i0.ɵɵtext(4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"div\", 4, 5);\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(7, \"svg\", 6);\n      i0.ɵɵelement(8, \"circle\", 7);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(4);\n      i0.ɵɵtextInterpolate(ctx.value || \"BUTTON\");\n    }\n  },\n  styles: [\".body[_ngcontent-%COMP%]{width:auto;min-width:70px;height:auto;min-height:1rem;font-size:1rem;padding:4px 12px;border-radius:99px;background-color:#000;color:#fff;cursor:pointer}.body[_ngcontent-%COMP%]   .text[_ngcontent-%COMP%]{display:flex;flex-direction:column;justify-content:center;align-items:center;text-align:center}.body[_ngcontent-%COMP%]   .loadingWrapper[_ngcontent-%COMP%]{display:none}.loadingWrapper[_ngcontent-%COMP%]{display:flex;flex-direction:column;justify-content:center;align-items:center;-webkit-animation:loadingSvg 1s infinite;animation:loadingSvg 1s infinite}.loadingWrapper[_ngcontent-%COMP%]   svg[_ngcontent-%COMP%]   circle[_ngcontent-%COMP%]{stroke-dasharray:50.3;stroke-dashoffset:50.3;stroke-linecap:round;-webkit-animation:loadingCircle 4s ease infinite;animation:loadingCircle 4s ease infinite}.btnLocked[_ngcontent-%COMP%]{cursor:not-allowed}.btnLocked[_ngcontent-%COMP%]:hover{opacity:1;box-shadow:none}@-webkit-keyframes loadingCircle{0%,to{stroke-dashoffset:50.3;stroke-width:2}50%{stroke-dashoffset:3}50.1%{stroke-dashoffset:100.5}0%{stroke-width:1}50%{stroke-width:3}to{stroke-width:1}}@keyframes loadingCircle{0%,to{stroke-dashoffset:50.3;stroke-width:2}50%{stroke-dashoffset:3}50.1%{stroke-dashoffset:100.5}0%{stroke-width:1}50%{stroke-width:3}to{stroke-width:1}}@-webkit-keyframes loadingSvg{to{transform:rotate(1turn)}}@keyframes loadingSvg{to{transform:rotate(1turn)}}\"]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BtnWithLoadingComponent, [{\n    type: Component,\n    args: [{\n      selector: 'acdnc-btn-with-loading',\n      templateUrl: './btn-with-loading.component.html',\n      styleUrls: ['./btn-with-loading.component.scss']\n    }]\n  }], function () {\n    return [];\n  }, {\n    value: [{\n      type: Input\n    }],\n    $loading: [{\n      type: Input\n    }],\n    text: [{\n      type: ViewChild,\n      args: ['text']\n    }],\n    loadingWrapper: [{\n      type: ViewChild,\n      args: ['loadingWrapper']\n    }],\n    body: [{\n      type: ViewChild,\n      args: ['body']\n    }]\n  });\n})();\n\nclass AcdncModule {}\n\nAcdncModule.ɵfac = function AcdncModule_Factory(t) {\n  return new (t || AcdncModule)();\n};\n\nAcdncModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: AcdncModule\n});\nAcdncModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AcdncModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [//Directives\n      autoHeight100Percent, TransferClickToParentElement, //Components\n      BtnWithLoadingComponent],\n      imports: [CommonModule],\n      exports: [autoHeight100Percent, TransferClickToParentElement, BtnWithLoadingComponent]\n    }]\n  }], null, null);\n})();\n/*\r\n * Public API Surface of acdnc\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { AcdncModule, BtnWithLoadingComponent, TransferClickToParentElement, autoHeight100Percent };","map":{"version":3,"sources":[],"names":[],"mappings":"","sourcesContent":["import * as i0 from '@angular/core';\nimport { Directive, Component, Input, ViewChild, NgModule } from '@angular/core';\nimport * as i1 from 'ng-resize-observer';\nimport { ngResizeObserverProviders } from 'ng-resize-observer';\nimport { CommonModule } from '@angular/common';\n\nclass TransferClickToParentElement {\r\n    constructor(el) {\r\n        const element = el.nativeElement;\r\n        if (element.parentElement) {\r\n            element.addEventListener('click', (e) => {\r\n                var _a, _b;\r\n                e.stopPropagation();\r\n                e.preventDefault();\r\n                if ((_a = element.parentElement) === null || _a === void 0 ? void 0 : _a.click)\r\n                    (_b = element.parentElement) === null || _b === void 0 ? void 0 : _b.click();\r\n            });\r\n        }\r\n    }\r\n}\r\nTransferClickToParentElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.0\", ngImport: i0, type: TransferClickToParentElement, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\r\nTransferClickToParentElement.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"12.0.0\", type: TransferClickToParentElement, selector: \"[transferClickToParentElement]\", ngImport: i0 });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.0\", ngImport: i0, type: TransferClickToParentElement, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: '[transferClickToParentElement]'\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; } });\n\nclass autoHeight100Percent {\r\n    constructor(el, resize$) {\r\n        this.element = el.nativeElement;\r\n        let direction = '';\r\n        let ref = window.innerWidth;\r\n        window.addEventListener('resize', () => {\r\n            direction = ref - window.innerWidth > 0 ? 'left' : 'right';\r\n            ref = window.innerWidth;\r\n        });\r\n        setTimeout(() => {\r\n            const element = el.nativeElement;\r\n            const initialHeight = element.offsetHeight;\r\n            resize$.subscribe(() => {\r\n                if (element.parentElement) {\r\n                    element.style.height = '0px';\r\n                    if (direction == 'right') {\r\n                        if (element.parentElement.offsetHeight - element.offsetHeight > 0) {\r\n                            element.style.height = `${element.parentElement.offsetHeight - element.offsetHeight + initialHeight}px`;\r\n                        }\r\n                        else {\r\n                            element.style.height = `${initialHeight}px`;\r\n                        }\r\n                    }\r\n                    else {\r\n                        element.style.height = `${element.parentElement.offsetHeight}px`;\r\n                    }\r\n                }\r\n            });\r\n        }, 100);\r\n    }\r\n    ngAfterViewInit() {\r\n        if (this.element.parentElement) {\r\n            if (this.element.offsetHeight < this.element.parentElement.offsetHeight) {\r\n                this.element.style.height = `${this.element.parentElement.offsetHeight}px`;\r\n            }\r\n        }\r\n    }\r\n}\r\nautoHeight100Percent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.0\", ngImport: i0, type: autoHeight100Percent, deps: [{ token: i0.ElementRef }, { token: i1.NgResizeObserver }], target: i0.ɵɵFactoryTarget.Directive });\r\nautoHeight100Percent.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"12.0.0\", type: autoHeight100Percent, selector: \"[autoHeight100Percent]\", providers: [...ngResizeObserverProviders], ngImport: i0 });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.0\", ngImport: i0, type: autoHeight100Percent, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: '[autoHeight100Percent]',\r\n                    providers: [...ngResizeObserverProviders]\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.NgResizeObserver }]; } });\n\nclass BtnWithLoadingComponent {\r\n    constructor() { }\r\n    ngOnInit() {\r\n    }\r\n    ngAfterViewInit() {\r\n        this.textEl = this.text.nativeElement;\r\n        this.loadingWrapperEl = this.loadingWrapper.nativeElement;\r\n        this.bodyEl = this.body.nativeElement;\r\n        this.$loading.subscribe(r => this.onLoadingChange(r));\r\n    }\r\n    onLoadingChange(v) {\r\n        let width;\r\n        if (v) {\r\n            width = this.bodyEl.offsetWidth;\r\n            this.textEl.style.display = 'none';\r\n            this.loadingWrapperEl.style.display = 'flex';\r\n            this.bodyEl.style.width = `${width}px`;\r\n        }\r\n        else {\r\n            this.textEl.style.display = 'flex';\r\n            this.loadingWrapperEl.style.display = 'none';\r\n            this.bodyEl.style.width = `${width}px`;\r\n        }\r\n    }\r\n}\r\nBtnWithLoadingComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.0\", ngImport: i0, type: BtnWithLoadingComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\r\nBtnWithLoadingComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.0.0\", type: BtnWithLoadingComponent, selector: \"acdnc-btn-with-loading\", inputs: { value: \"value\", $loading: \"$loading\" }, viewQueries: [{ propertyName: \"text\", first: true, predicate: [\"text\"], descendants: true }, { propertyName: \"loadingWrapper\", first: true, predicate: [\"loadingWrapper\"], descendants: true }, { propertyName: \"body\", first: true, predicate: [\"body\"], descendants: true }], ngImport: i0, template: \"<div class=\\\"body\\\" #body>\\r\\n  <div class=\\\"text\\\" #text>{{value || 'BUTTON'}}</div>\\r\\n  <div class=\\\"loadingWrapper\\\" #loadingWrapper>\\r\\n    <svg width=\\\"20\\\" height=\\\"20\\\">\\r\\n      <circle cx=\\\"10\\\" cy=\\\"10\\\" r=\\\"8\\\" stroke=\\\"white\\\" stroke-width=\\\"2\\\" fill=\\\"transparent\\\"></circle>\\r\\n    </svg>\\r\\n  </div>\\r\\n</div>\", styles: [\".body{width:auto;min-width:70px;height:auto;min-height:1rem;font-size:1rem;padding:4px 12px;border-radius:99px;background-color:#000;color:#fff;cursor:pointer}.body .text{display:flex;flex-direction:column;justify-content:center;align-items:center;text-align:center}.body .loadingWrapper{display:none}.loadingWrapper{display:flex;flex-direction:column;justify-content:center;align-items:center;-webkit-animation:loadingSvg 1s infinite;animation:loadingSvg 1s infinite}.loadingWrapper svg circle{stroke-dasharray:50.3;stroke-dashoffset:50.3;stroke-linecap:round;-webkit-animation:loadingCircle 4s ease infinite;animation:loadingCircle 4s ease infinite}.btnLocked{cursor:not-allowed}.btnLocked:hover{opacity:1;box-shadow:none}@-webkit-keyframes loadingCircle{0%,to{stroke-dashoffset:50.3;stroke-width:2}50%{stroke-dashoffset:3}50.1%{stroke-dashoffset:100.5}0%{stroke-width:1}50%{stroke-width:3}to{stroke-width:1}}@keyframes loadingCircle{0%,to{stroke-dashoffset:50.3;stroke-width:2}50%{stroke-dashoffset:3}50.1%{stroke-dashoffset:100.5}0%{stroke-width:1}50%{stroke-width:3}to{stroke-width:1}}@-webkit-keyframes loadingSvg{to{transform:rotate(1turn)}}@keyframes loadingSvg{to{transform:rotate(1turn)}}\"] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.0\", ngImport: i0, type: BtnWithLoadingComponent, decorators: [{\r\n            type: Component,\r\n            args: [{\r\n                    selector: 'acdnc-btn-with-loading',\r\n                    templateUrl: './btn-with-loading.component.html',\r\n                    styleUrls: ['./btn-with-loading.component.scss']\r\n                }]\r\n        }], ctorParameters: function () { return []; }, propDecorators: { value: [{\r\n                type: Input\r\n            }], $loading: [{\r\n                type: Input\r\n            }], text: [{\r\n                type: ViewChild,\r\n                args: ['text']\r\n            }], loadingWrapper: [{\r\n                type: ViewChild,\r\n                args: ['loadingWrapper']\r\n            }], body: [{\r\n                type: ViewChild,\r\n                args: ['body']\r\n            }] } });\n\nclass AcdncModule {\r\n}\r\nAcdncModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.0\", ngImport: i0, type: AcdncModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\nAcdncModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.0.0\", ngImport: i0, type: AcdncModule, declarations: [\r\n        //Directives\r\n        autoHeight100Percent,\r\n        TransferClickToParentElement,\r\n        //Components\r\n        BtnWithLoadingComponent], imports: [CommonModule], exports: [autoHeight100Percent,\r\n        TransferClickToParentElement,\r\n        BtnWithLoadingComponent] });\r\nAcdncModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.0.0\", ngImport: i0, type: AcdncModule, imports: [[CommonModule]] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.0\", ngImport: i0, type: AcdncModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    declarations: [\r\n                        //Directives\r\n                        autoHeight100Percent,\r\n                        TransferClickToParentElement,\r\n                        //Components\r\n                        BtnWithLoadingComponent\r\n                    ],\r\n                    imports: [CommonModule],\r\n                    exports: [\r\n                        autoHeight100Percent,\r\n                        TransferClickToParentElement,\r\n                        BtnWithLoadingComponent\r\n                    ]\r\n                }]\r\n        }] });\n\n/*\r\n * Public API Surface of acdnc\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { AcdncModule, BtnWithLoadingComponent, TransferClickToParentElement, autoHeight100Percent };\n"]},"metadata":{},"sourceType":"module"}